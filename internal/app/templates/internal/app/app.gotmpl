// Package app that implement application.
package app

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"go.uber.org/automaxprocs/maxprocs"
	"go.uber.org/zap"

	"{{ lower .GoModule }}/internal/app/config"
	"{{ lower .GoModule }}/internal/app/container"
	"{{ lower .GoModule }}/internal/app/http"
	"{{ lower .GoModule }}/internal/app/readiness"
)

var build = "develop" //nolint:gochecknoglobals //ldd-flag

// Run runs application.
func Run(c *zap.Config, log *zap.SugaredLogger) error {
	var conf *config.Conf
	var di *container.Container
	var err error

	// Global context
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Readiness channel
	ready := make(chan struct{}, readiness.Resources)

	// Config initialization
	if conf, err = config.New(build, log); err != nil {
		return err
	}

	// Dependency Injection container
	if di, err = container.New(conf, c, log); err != nil {
		return err
	}

	// Readiness processing
	go readiness.Check(ready, &di.ReadyAll)

	// GOMAXPROCS definitions
	if _, err = maxprocs.Set(maxprocs.Logger(log.Debugf)); err != nil {
		return err
	}

	log.Info("{{ .Name }} start")
	defer log.Info("{{ .Name }} shutdown")

	// HTTP Servers startup
	srvErrors := make(chan error, 1)
	defer close(srvErrors)

	http.Init(ctx, ready, di, srvErrors)

	// Signal handling initialization
	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)
	defer signal.Stop(interrupt)

	// Shutdown
	select {
	case err = <-srvErrors:
		shutdown(di, log)

		return err
	case s := <-interrupt:
		log.Infof("Received signal: %s", s)

		shutdown(di, log)
	}

	return nil
}
