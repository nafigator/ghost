// Package container implements DI container.
package container

import (
	"context"

	"go.uber.org/zap"

	"{{ lower .GoModule }}/internal/app/config"
)

type closer interface {
	// Shutdown must be called graceful app shutdown.
	Shutdown(context.Context) error
	// Close must be called if graceful shutdown returns error and there is needs to force close.
	Close() error
}

// Container dependency injection container.
type Container struct {
	Conf     *config.Conf
	Log      *zap.SugaredLogger
	LogConf  *zap.Config
	Closers  map[string]closer
	ReadyAll bool
}

// New creates new dependency injection container.
func New(conf *config.Conf, logConf *zap.Config, log *zap.SugaredLogger) (*Container, error) {
	c := Container{
		Conf:    conf,
		Log:     log,
		LogConf: logConf,
		Closers: make(map[string]closer),
	}

	return &c, nil
}
