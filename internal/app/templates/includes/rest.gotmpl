{{ define "MakefileAPIPorts" }}
export EXTERNAL_API_PORT:=80
export API_PORT:=80
{{- end }}
{{ define "ComposeOverrideExternalAPI" }}
      - "0.0.0.0:${EXTERNAL_API_PORT}:${API_PORT}"
{{- end }}
{{ define "ConfigSrvSocket" }}
	SrvSocket       string        `conf:"default:0.0.0.0:80,short:s,help:HTTP server host and port"`
{{- end }}
{{ define "InitConstRest" }}
	aux  = "Aux server"
	rest = "REST server"
{{- end }}
{{ define "InitConstOrig" }}
	aux = "Aux server"
{{- end }}
{{ define "InitWaitForSrvSocket" }}
	go socket.Wait(ready, di.Conf.SrvSocket, di.Log)
{{- end }}
{{ define "InitStartServerCall" }}
	startServer(ctx, di, srvErrors)
{{- end }}
{{ define "InitStartServer" }}
func startServer(ctx context.Context, di *container.Container, srvErrors chan<- error) {
	srv := http.Server{
		BaseContext: func(_ net.Listener) context.Context {
			return ctx
		},
		Addr:         di.Conf.SrvSocket,
		Handler:      srvMux(di),
		ReadTimeout:  di.Conf.ReadTimeout,
		WriteTimeout: di.Conf.WriteTimeout,
		ErrorLog:     log.New(writer.New(di.Log), "", 0),
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			srvErrors <- err
		}
	}()

	di.Closers[rest] = &srv
}
{{ end }}
{{ define "MuxImportApi" }}
	"github.com/test/gateway/internal/app/http/handlers/api"
{{- end }}
{{ define "MuxSrvMux" }}
// srvMux provides HTTP multiplexer for common server.
func srvMux(di *container.Container) http.Handler {
	d := dumper.New(debug.New(di.Log))
	m := mux.New(di.Log, d.MiddleWare)
	h := api.New()

	m.GET("/", h.Index)

	return m
}
{{ end }}
